module net

import error
import io
import struct

self.HTTP = 'HTTP'
self.OK = 'OK'
self.TEXT_HTML = 'text/html'
self.UTF_8 = 'UTF-8'

self.LT = '<'
self.GT = '>'
self.LT_ESCAPED = '&lt;'
self.GT_ESCAPED = '&gt;'
self.AMPER = '&'
self.QUESTION = '?'
self.EQUALS = '='
self.WHITE_SPACE = ' '
self.F_SLASH = '/'
self.COLON = ':'
self.RETURN_NEWLINE = '\r\n'

self.COOKIE_KEY = 'Cookie'
self.COOKIE_SEPARATOR = '; '

self.NOT_FOUND = 'Could not find file.'


class Header {
  new(field protocol,
      field version,
      field status_code,
      field status,
      field content_type,
      field charset) {}
  method to_s() {
    cat(protocol, '/', version, ' ',
           status_code, ' ', status,
           '\r\nContent-Type: ', content_type,
           '; charset=', charset, '\r\n\r\n')
  }
}

def parse_header(header_text) {
  i = header_text.find('/')
  protocol = header_text.substr(0, i)
  i2 = i + 1 + header_text.find(' ', i+1)
  version = header_text.substr(i+1, i2)
  i3 = i2 + 1 + header_text.find(' ', i2+1)
  status_code = header_text.substr(i2+1, i3)
  i4 = i3 + 1 + header_text.find('\r\n', i3+1)
  status = header_text.substr(i3+1, i4)
  i5 = i4 + 1 + header_text.find(' ', i4+1)
  i6 = i5 + 1 + header_text.find(';', i5+1)
  content_type = header_text.substr(i5+1, i6)
  i7 = i6 + 1 + header_text.find('=', i6+1)
  i8 = i7 + 1 + header_text.find('\r\n', i7+1)
  charset = header_text.substr(i7+1, i8)
  return Header(protocol, version, status_code, status, content_type, charset)
}

class HttpRequest {
    field _headers
    new(field type,
        field path,
        field params,
        field protocol,
        field version,
        headers) {
          _headers = headers
        }
    method get_header_value(key) {
      return _headers[key]
    }
    method get_host() {
      return _headers['Host']
    }
    method get_connection() {
      return _headers['Connection']
    }
    method get_user_agent() {
      return _headers['User-Agent']
    }
    method get_accept() {
      return _headers['Accept'].split(',')
    }
    method to_s() {
      ret = cat(type, WHITE_SPACE, path)
      if params and (params.keys.len() > 0) {
        ret.extend(QUESTION)
        param_arr = []
        for (k, v) in params {
          param_arr.append(cat(k, EQUALS, v))
        }
        ret.extend(AMPER.join(param_arr))
      }
      None  ; TODO: Why is this necessary?
      ret.extend(WHITE_SPACE).extend(protocol).extend(F_SLASH)
          .extend(version).extend('\r\n')
      if _headers {
        for (k, v) in _headers {
          ret.extend('  ').extend(k).extend(': ').extend(str(v))
              .extend('\r\n')
        }
      }
      return ret
    }
}


class HttpResponse {
  field _protocol, _version, _status_code, _status
  field _headers, _content
  new() {
    _protocol = HTTP
    _version = 1.1
    _status_code = 200
    _status = 'OK'
    _headers = {}
    _headers['Content-Type'] = 'text/html'
    _headers['Accept-Ranges'] = 'bytes'
    _headers['Content-Length'] = 0
    _content = ''
  }
  method set_status(status) {
    _status = status
    return self
  }
  method set_status_code(status_code) {
    _status_code = status_code
    return self
  }
  method set_server(server) {
    _headers['Server'] = server
    return self
  }
  method set_date(date_text) {
    _headers['Date'] = date_text
    return self
  }
  method set_last_modified(date_text) {
    _headers['Last-Modified'] = date_text
    return self
  }
  method set_content_type(type) {
    _headers['Content-Type'] = type
    return self
  }
  method set_accept_ranges(ranges) {
    _headers['Accept-Ranges'] = ranges
    return self
  }
  method set_cookie(cookie) {
    if cookie is Cookies {
      cookie = cookie.to_s()
    }
    _headers['Set-Cookie'] = cookie
  }
  method add_content(text) {
    _content.extend(text)
    _headers['Content-Length'] = _headers['Content-Length'] + text.len()
    return self
  }
  method to_s() {
    res = cat(_protocol, '/', _version, ' ', _status_code, ' ', _status, '\r\n')
    for (k, v) in _headers {
      res.extend(cat(k, ': ', v, '\r\n'))
    }
    res.extend('\r\n')
    res.extend(_content)
    return res
  }
}

def redirect(request, response, target) {
  response.set_status_code(301)
  location = target
  if request.params and (request.params.keys.len() > 0) {
    location.extend(QUESTION)
    param_arr = []
    for (k, v) in request.params {
      param_arr.append(cat(k, EQUALS, v))
    }
    location.extend(AMPER.join(param_arr))
  }
  response._headers['Location'] = location
  return response
}

def parse_params(path) {
  q_index = path.find(QUESTION)
  if ~q_index {
    return (path, {})
  }
  (
    path.substr(0, q_index),
    path.substr(q_index + 1)
      .split(AMPER)
      .collect(
        (a, part) {
          eq_index = part.find(EQUALS)
          if ~eq_index {
            a[part] ='1'
          } else {
            a[part.substr(0, eq_index)] = part.substr(eq_index + 1)
          }
          return a
        },
        {}))
}

def parse_request(req) {
  try {
    parts = req.split(RETURN_NEWLINE)
    if parts.len() == 0 {
      raise error.Error(cat('Invalid request: ', req))
    }
    request = parts[0].trim()
    req_head = request.split(WHITE_SPACE)
    type = req_head[0]
    path = req_head[1]
    (path, params) = parse_params(path)
    protocol = req_head[2].split(F_SLASH)
    
    map = {}
    for i=1, i<parts.len(), i=i+1 {
      kv = parts[i].split(COLON)
      key = kv[0].trim()
      map[kv[0].trim()] = kv[1].trim()
    }
    return HttpRequest(type, path, params, protocol[0], protocol[1], map)
  } catch e {
    io.fprintln(io.ERROR, e)
    return None
  }
}

class Cookies {
  new(field map) {}
  method get(key) {
    return map[key]
  }
  method to_s() {
    res = '{'
    map.each((k,v) -> res.extend('\"').extend(str(k)).extend('\":\"').extend(str(v)).extend('\" '))
    res.extend('}')
    return res
  }
}

def parse_cookie(cookie) {
  res = {}
  kvs = cookie.split(COOKIE_SEPARATOR)
  for i=0, i<kvs.len(), i=i+1 {
    kv = kvs[i].split(EQUALS)
    res[kv[0]] = kv[1]
  }
  return Cookies(res)
}

class HttpSocketHandle {
  new(field raw_handle) {}

  method receive() {
    return parse_request(await raw_handle.receive())
  }
  method send(http_response) {
    if ~(http_response is HttpResponse) {
      raise Error('HttpSocketHandle.send() expects an HttpResponse argument.')
    }
    await raw_handle.send(http_response.to_s())
  }
  method close() {
    raw_handle.close()
  }
}

class HttpSocket {
  new(field raw_socket) {}

  method accept() {
    return HttpSocketHandle(await raw_socket.accept())
  }
  method close() {
    raw_socket.close()
  }
}