module simple_http

import io
import net
import socket
import struct

; A very simple HTTP server that can be used to serve static content.
;
; Either directly invoke SimpleHTTPServer(dir, port).start() or from the command line:
; 
; ```
;   jlr lib/simple_http.jv -- --dir=. --port=80
; ```
class SimpleHTTPServer {
  field cache, stop_called, sock
  new(field dir='.', field port=80) {
    cache = struct.Cache(255)
    stop_called = False
  }

  method start() async {
    sock = net.HttpSocket(
      socket.Socket(socket.AF_INET, socket.SOCK_STREAM, 0, 80, 4))
    while ~stop_called {
      handle = sock.accept()
      request = handle.receive()
      io.println(cat('Received request: ', request.type, ' ', request.path))
      response = net.HttpResponse()
      if _is_icon(request) {
        response.set_content_type('image/x-icon')
      }
      if request.path == '/' {
        path = '/index.html'
      }
      response_content = cache.get(request.path, _read_file)
      if ~response_content {
        response.set_status_code(404)
            .set_status('NOT FOUND')
            .add_content('<h1>Sorry, page not found.</h1>')
      } else {
        response.add_content('<pre>')
            .add_content(response_content)
            .add_content('</pre>')
      }
      handle.send(response)
      handle.close()
    }
    sock.close()
  }

  method _is_icon(request) {
    return request.path.ends_with('.ico')
  }

  method _read_file(file_name) {
    try {
      return io.FileReader(cat(dir, file_name)).getall()
    } catch e {
      io.fprintln(io.ERROR, e)
      return None
    }
  }

  method stop() {
    stop_called = True
  }
}


if ~args.dir {
  dir = '.'
}
if ~args.port {
  port = 80
}

if __main {
  await SimpleHTTPServer(dir, port).start()
}