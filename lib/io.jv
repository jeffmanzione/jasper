module io

import struct

self.IN = FileReader('__STDIN__', True)
self.OUT = FileWriter('__STDOUT__', True)
self.ERROR = FileWriter('__STDERR__', True)

class _FileInternal {
  field file
  new(fn, rw, a, binary) {
    mode = cat(rw)
    if binary {
      mode.extend('b')
    }
    if a {
      mode.extend('+')
    }
    file = __File(fn, mode)
  }
  method gets(n) await file.__gets(n)
  method getline() await file.__getline()
  method getall() await file.__getall()
  method puts(s) await file.__puts(s)
  method close() await file.__close()
}

class FileReader {
  field fi
  new(fn, binary=False) {
    fi = _FileInternal(fn, 'r', False, binary)
  }
  method close() fi.close()
  method gets(n) fi.gets(n)
  method getline() fi.getline()
  method getlines() fi.getlines()
  method getall() fi.getall()
}

class FileWriter {
  field fi
  new(fn, append=False, binary=False) {
    fi = _FileInternal(fn, 'w', append, binary)
  }
  method write(s) fi.puts(s)
  method writeln(s) {
    fi.puts(s)
    fi.puts('\n')
  }
  method close() fi.close()
}

_EVENT_TYPES = {
  
}

class FileWatcher {
  field _fw
  new() {
    _fw = __FileWatcher()
  }
  method watch(dir) {
    if ~(dir is String) {
      raise Error('FileWatcher.watch() only takes a String parameter.')
    }
    if ~_fw.__is_valid() {
      raise Error('FileWatcher is not valid.')
    }
    return _fw.__watch(dir)
  }
  method unwatch(watch_dir) {
    if ~(watch_dir is __WatchDir) {
      raise Error('FileWatcher.unwatch() can only be called with a __WatchDir.')
    }
    _fw.__unwatch(watch_dir)
  }
  ; IN_ACCESS=1
  ; IN_ATTRIB=4
  ; IN_CLOSE=24
  ; IN_CLOSE_WRITE=8
  ; IN_CLOSE_NOWRITE=16
  ; IN_CREATE=256
  ; IN_DELETE=512
  ; IN_DELETE_SELF=1024
  ; IN_MODIFY=2
  ; IN_MOVE=192
  ; IN_MOVE_SELF=2048
  ; IN_MOVED_FROM=64
  ; IN_MOVED_TO=128
  ; IN_OPEN=32
  ; IN_IGNORED=32768
  ; IN_ISDIR=1073741824
  ; IN_Q_OVERFLOW=16384
  ; IN_UNMOUNT=8192
  method read() {
    await _fw.__read()
    files_and_masks = _fw.__get_read()
  }
  method close() {
    _fw.__close()
  }
}

def fprint(f, a) {
  f.write(str(a))
}

def fprintln(f, a) {
  f.writeln(str(a))
}

def print(a) {
  fprint(OUT, a)
}

def println(a) {
  fprintln(OUT, a)
}

def error(a) {
  fprint(ERROR, a)
}

def errorln(a) {
  fprintln(ERROR, a)
}