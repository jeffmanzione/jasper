import data
import io
import test

self.expect = test.expect

mat = data.Int64Matrix(20, 5)
io.println(mat)
io.println(mat[2])


test.Tester().test(self)

@test.TestClass
class Int8ArrayTest : ArrayTest {
  new() {
    super(ArrayTest)(data.Int8Array)
  }
}

@test.TestClass
class Int32ArrayTest : ArrayTest {
  new() {
    super(ArrayTest)(data.Int32Array)
  }
}

@test.TestClass
class Int64ArrayTest : ArrayTest {
  new() {
    super(ArrayTest)(data.Int64Array)
  }
}

@test.TestClass
class Float32ArrayTest : ArrayTest {
  new() {
    super(ArrayTest)(data.Float32Array)
  }
}

@test.TestClass
class Float64ArrayTest : ArrayTest {
  new() {
    super(ArrayTest)(data.Float64Array)
  }
}

class ArrayTest {
  new(field class) {}

  @test.Test
  method test_default() {
    arr = class()
    expect(arr.to_arr(), [])
    expect(str(arr), class.name() + '([])')
  }

  @test.Test
  method test_passed_size() {
    arr = class(5)
    expect(arr.to_arr(), [0, 0, 0, 0, 0])
    expect(str(arr), class.name() + '([0, 0, 0, 0, 0])')
  }

  @test.Test
  method test_passed_few_values() {
    arr = class([0, 1, 2, 3, 4])
    expect(arr.to_arr(), [0, 1, 2, 3, 4])
    expect(str(arr), class.name() + '([0, 1, 2, 3, 4])')
  }

  @test.Test
  method test_passed_many_values() {
    arr = class([0, 1, 2, 3, 4, 5, 6, 7, 8, 9])
    expect(arr.to_arr(), [0, 1, 2, 3, 4, 5, 6, 7, 8, 9])
    expect(str(arr), class.name() + '([0, 1, 2, 3, 4, ...9])')
  }

  @test.Test
  method test_index_range_no_skips() {
    arr = class([0, 1, 2, 3, 4, 5, 6, 7, 8, 9])
    subarr = arr[2:5]
    expect(str(subarr), class.name() + '([2, 3, 4])')
    expect(subarr.to_arr(), [2, 3, 4])
  }

  @test.Test
  method test_index_range_with_skips() {
    arr = class([0, 1, 2, 3, 4, 5, 6, 7, 8, 9])
    subarr = arr[2:7:2]
    expect(str(subarr), class.name() + '([2, 4, 6])')
    expect(subarr.to_arr(), [2, 4, 6])
  }

  @test.Test
  method test_index_reverse() {
    arr = class([0, 1, 2, 3, 4, 5, 6, 7, 8, 9])
    subarr = arr[7:2:(-1)]
    expect(str(subarr), class.name() + '([7, 6, 5, 4, 3])')
    expect(subarr.to_arr(), [7, 6, 5, 4, 3])
  }

  @test.Test
  method test_set_range() {
    arr = class([0, 1, 2, 3, 4, 5, 6, 7, 8, 9])
    arr[2:9:2] = class([1, 2, 3, 4])
    expect(str(arr), class.name() + '([0, 1, 1, 3, 2, ...9])')
    expect(arr.to_arr(), [0, 1, 1, 3, 2, 5, 3, 7, 4, 9])
  }
  
  @test.Test
  method test_copy() {
    arr = class([0, 1, 2, 3, 4, 5, 6, 7, 8, 9])
    cpy = arr.copy()
    expect(str(cpy), class.name() + '([0, 1, 2, 3, 4, ...9])')
    expect(cpy.to_arr(), [0, 1, 2, 3, 4, 5, 6, 7, 8, 9])
  }

  @test.Test
  method test_reversed() {
    arr = class([0, 1, 2, 3, 4, 5, 6, 7, 8, 9])
    rcpy = arr.reversed()
    expect(str(rcpy), class.name() + '([9, 8, 7, 6, 5, ...0])')
    expect(rcpy.to_arr(), [9, 8, 7, 6, 5, 4, 3, 2, 1, 0])
  }

  @test.Test
  method test_sorted() {
    arr = class([0, 9, 1, 8, 2, 7, 3, 6, 4, 5])
    rcpy = arr.sorted()
    expect(str(rcpy), class.name() + '([0, 1, 2, 3, 4, ...9])')
    expect(rcpy.to_arr(), [0, 1, 2, 3, 4, 5, 6, 7, 8, 9])
  }

  @test.Test
  method test_sorted_already_sorted() {
    arr = class([0, 1, 2, 3, 4, 5, 6, 7, 8, 9])
    rcpy = arr.sorted()
    expect(str(rcpy), class.name() + '([0, 1, 2, 3, 4, ...9])')
    expect(rcpy.to_arr(), [0, 1, 2, 3, 4, 5, 6, 7, 8, 9])
  }

  @test.Test
  method test_sorted_reversed() {
    arr = class([9, 8, 7, 6, 5, 4, 3, 2, 1, 0])
    rcpy = arr.sorted()
    expect(str(rcpy), class.name() + '([0, 1, 2, 3, 4, ...9])')
    expect(rcpy.to_arr(), [0, 1, 2, 3, 4, 5, 6, 7, 8, 9])
  }
}
